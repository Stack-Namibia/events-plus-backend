import {
  AddTicketPost,
  TicketGetQuery,
  TicketIdGetPath,
  TicketModel,
  TicketResponse,
} from '@/http/nodegen/interfaces';

import { TicketDomainInterface } from '@/http/nodegen/domainInterfaces/TicketDomainInterface';
import { JwtAccess } from '@/http/nodegen/interfaces';

import TicketDomainMock from './__mocks__/TicketDomainMock';

class TicketDomain implements TicketDomainInterface {
  /**
   * Operation ID: getTickets
   * Path middleware used see: TicketDomainInterface.getTickets
   * Summary: undefined
   * Description: get all Tickets
   **/
  public async getTickets(
    jwtData: JwtAccess,
    query: TicketGetQuery
  ): Promise<TicketResponse> {
    return TicketDomainMock.getTickets(jwtData, query);
  }

  /**
   * Operation ID: addTicket
   * Path middleware used see: TicketDomainInterface.addTicket
   * Summary: undefined
   * Description: add new Ticket
   **/
  public async addTicket(
    body: AddTicketPost,
    jwtData: JwtAccess
  ): Promise<TicketModel> {
    return TicketDomainMock.addTicket(body, jwtData);
  }

  /**
   * Operation ID: getTicketById
   * Path middleware used see: TicketDomainInterface.getTicketById
   * Summary: undefined
   * Description: Returns a single Ticket by id
   **/
  public async getTicketById(
    jwtData: JwtAccess,
    params: TicketIdGetPath
  ): Promise<TicketResponse> {
    return TicketDomainMock.getTicketById(jwtData, params);
  }
}

export default new TicketDomain();
